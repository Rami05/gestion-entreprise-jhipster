{"remainingRequest":"/home/spark/Bureau/jhipter-monolotic/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/spark/Bureau/jhipter-monolotic/node_modules/ts-loader/index.js??ref--9-3!/home/spark/Bureau/jhipter-monolotic/node_modules/angular-router-loader/src/index.js!/home/spark/Bureau/jhipter-monolotic/node_modules/tslint-loader/index.js!/home/spark/Bureau/jhipter-monolotic/src/main/webapp/app/entities/commande-produit/commande-produit.service.ts","dependencies":[{"path":"/home/spark/Bureau/jhipter-monolotic/src/main/webapp/app/entities/commande-produit/commande-produit.service.ts","mtime":1601565090798},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/spark/Bureau/jhipter-monolotic/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar COMMANDE_PRODUITService = /** @class */ (function () {\n    function COMMANDE_PRODUITService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/commande-produits';\n    }\n    COMMANDE_PRODUITService.prototype.create = function (cOMMANDE_PRODUIT) {\n        var _this = this;\n        var copy = this.convertDateFromClient(cOMMANDE_PRODUIT);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    COMMANDE_PRODUITService.prototype.update = function (cOMMANDE_PRODUIT) {\n        var _this = this;\n        var copy = this.convertDateFromClient(cOMMANDE_PRODUIT);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    COMMANDE_PRODUITService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    COMMANDE_PRODUITService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    COMMANDE_PRODUITService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    COMMANDE_PRODUITService.prototype.convertDateFromClient = function (cOMMANDE_PRODUIT) {\n        var copy = Object.assign({}, cOMMANDE_PRODUIT, {\n            dateCreation: cOMMANDE_PRODUIT.dateCreation != null && cOMMANDE_PRODUIT.dateCreation.isValid()\n                ? cOMMANDE_PRODUIT.dateCreation.format(input_constants_1.DATE_FORMAT)\n                : null,\n            dateModification: cOMMANDE_PRODUIT.dateModification != null && cOMMANDE_PRODUIT.dateModification.isValid()\n                ? cOMMANDE_PRODUIT.dateModification.toJSON()\n                : null\n        });\n        return copy;\n    };\n    COMMANDE_PRODUITService.prototype.convertDateFromServer = function (res) {\n        if (res.body) {\n            res.body.dateCreation = res.body.dateCreation != null ? moment(res.body.dateCreation) : null;\n            res.body.dateModification = res.body.dateModification != null ? moment(res.body.dateModification) : null;\n        }\n        return res;\n    };\n    COMMANDE_PRODUITService.prototype.convertDateArrayFromServer = function (res) {\n        if (res.body) {\n            res.body.forEach(function (cOMMANDE_PRODUIT) {\n                cOMMANDE_PRODUIT.dateCreation = cOMMANDE_PRODUIT.dateCreation != null ? moment(cOMMANDE_PRODUIT.dateCreation) : null;\n                cOMMANDE_PRODUIT.dateModification =\n                    cOMMANDE_PRODUIT.dateModification != null ? moment(cOMMANDE_PRODUIT.dateModification) : null;\n            });\n        }\n        return res;\n    };\n    var _a;\n    COMMANDE_PRODUITService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n    ], COMMANDE_PRODUITService);\n    return COMMANDE_PRODUITService;\n}());\nexports.COMMANDE_PRODUITService = COMMANDE_PRODUITService;\n",{"version":3,"file":"/home/spark/Bureau/jhipter-monolotic/src/main/webapp/app/entities/commande-produit/commande-produit.service.ts","sourceRoot":"","sources":["/home/spark/Bureau/jhipter-monolotic/node_modules/angular-router-loader/src/index.js!/home/spark/Bureau/jhipter-monolotic/node_modules/tslint-loader/index.js!/home/spark/Bureau/jhipter-monolotic/src/main/webapp/app/entities/commande-produit/commande-produit.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ICOMMANDE_PRODUIT } from 'app/shared/model/commande-produit.model';\n\ntype EntityResponseType = HttpResponse<ICOMMANDE_PRODUIT>;\ntype EntityArrayResponseType = HttpResponse<ICOMMANDE_PRODUIT[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class COMMANDE_PRODUITService {\n    public resourceUrl = SERVER_API_URL + 'api/commande-produits';\n\n    constructor(protected http: HttpClient) {}\n\n    create(cOMMANDE_PRODUIT: ICOMMANDE_PRODUIT): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(cOMMANDE_PRODUIT);\n        return this.http\n            .post<ICOMMANDE_PRODUIT>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(cOMMANDE_PRODUIT: ICOMMANDE_PRODUIT): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(cOMMANDE_PRODUIT);\n        return this.http\n            .put<ICOMMANDE_PRODUIT>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ICOMMANDE_PRODUIT>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICOMMANDE_PRODUIT[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    protected convertDateFromClient(cOMMANDE_PRODUIT: ICOMMANDE_PRODUIT): ICOMMANDE_PRODUIT {\n        const copy: ICOMMANDE_PRODUIT = Object.assign({}, cOMMANDE_PRODUIT, {\n            dateCreation:\n                cOMMANDE_PRODUIT.dateCreation != null && cOMMANDE_PRODUIT.dateCreation.isValid()\n                    ? cOMMANDE_PRODUIT.dateCreation.format(DATE_FORMAT)\n                    : null,\n            dateModification:\n                cOMMANDE_PRODUIT.dateModification != null && cOMMANDE_PRODUIT.dateModification.isValid()\n                    ? cOMMANDE_PRODUIT.dateModification.toJSON()\n                    : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.dateCreation = res.body.dateCreation != null ? moment(res.body.dateCreation) : null;\n            res.body.dateModification = res.body.dateModification != null ? moment(res.body.dateModification) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((cOMMANDE_PRODUIT: ICOMMANDE_PRODUIT) => {\n                cOMMANDE_PRODUIT.dateCreation = cOMMANDE_PRODUIT.dateCreation != null ? moment(cOMMANDE_PRODUIT.dateCreation) : null;\n                cOMMANDE_PRODUIT.dateModification =\n                    cOMMANDE_PRODUIT.dateModification != null ? moment(cOMMANDE_PRODUIT.dateModification) : null;\n            });\n        }\n        return res;\n    }\n}\n"]}]}